# adjust $fpath for functions and completions
fpath+=("/usr/share/zsh/site-functions")
fpath+=("/usr/share/zsh/functions")
fpath+=("$HOME/.zsh/functions")
fpath+=("$HOME/.zsh/completions")
fpath+=("$HOME/.local/share/zsh/functions")
fpath+=("$HOME/.local/share/zsh/completions")

# keep only the first occurrence of each duplicated value
typeset -U path cdpath fpath manpath

# Use emacs keymap as the default.
bindkey -e

# Oh-My-Zsh/Prezto calls compinit during initialization,
# calling it twice causes slight start up slowdown
# as all $fpath entries will be traversed again.
autoload -U compinit && compinit

# Fish shell-like syntax highlighting
source ~/.zplugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_HIGHLIGHTERS+=()

# Fish shell-like history search
source ~/.zplugins/zsh-history-substring-search/zsh-history-substring-search.zsh
bindkey "^[[A" history-substring-search-up
bindkey "^[[B" history-substring-search-down

# Fish shell-like fast/unobtrusive autosuggestions
source ~/.zplugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# History options should be set in .zshrc and after oh-my-zsh sourcing.
# See https://github.com/nix-community/home-manager/issues/177.
HISTSIZE="100000"
SAVEHIST="100000"

HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
unsetopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
unsetopt HIST_EXPIRE_DUPS_FIRST
setopt SHARE_HISTORY
unsetopt EXTENDED_HISTORY
setopt autocd

autoload -Uz add-zsh-hook

# rehash completion when being signalled SIGUSR1
TRAPUSR1() {
  rehash
}

# ring bell whenever shell is ready
prompt_ringbell_precmd() {
  echo -e '\a\c'
}
add-zsh-hook precmd prompt_ringbell_precmd

# set title to whatever is running and where
set_title_hook() {
  print -Pn "\e]0;$1%~\a"
}
add-zsh-hook precmd set_title_hook
add-zsh-hook preexec set_title_hook

# menu style completion
zstyle ':completion:*' menu select

# completion of sudo commands
zstyle ':completion::complete:*' gain-privileges 1

# persistent dirstack
DIRSTACKFILE="$HOME/.zdirs"
DIRSTACKSIZE=20
setopt autopushd pushdsilent pushdtohome pushdignoredups
typeset -gaU PERSISTENT_DIRSTACK
function chpwd () {
  (( ZSH_SUBSHELL )) && return
  (( $DIRSTACKSIZE <= 0 )) && return
  [[ -z $DIRSTACKFILE ]] && return
  PERSISTENT_DIRSTACK=(
      $PWD "${(@)PERSISTENT_DIRSTACK[1,$DIRSTACKSIZE]}"
  )
  builtin print -l ${PERSISTENT_DIRSTACK} >! ${DIRSTACKFILE}
}
if [[ -f ${DIRSTACKFILE} ]]; then
  dirstack=( ${(f)"$(< $DIRSTACKFILE)"}(N) )
  [[ -d $dirstack[1] ]] && cd -q $dirstack[1] && cd -q $OLDPWD
fi
PERSISTENT_DIRSTACK=( "${dirstack[@]}" )

# mkdir+cd temporary
function cdt () {
  builtin cd "$(mktemp -d)"
  builtin pwd
}

# delete a word to the left considering '/' a word separator (alt+v)
function slash-backward-kill-word () {
    local WORDCHARS="${WORDCHARS:s@/@}"
    # zle backward-word
    zle backward-kill-word
}
zle -N slash-backward-kill-word
bindkey -M "emacs" "\ev" "slash-backward-kill-word"

# Create directory under cursor (ctrl+x-M)
function inplaceMkDirs () {
    # Press ctrl-xM to create the directory under the cursor or the selected area.
    # To select an area press ctrl-@ or ctrl-space and use the cursor.
    # Use case: you type "mv abc ~/testa/testb/testc/" and remember that the
    # directory does not exist yet -> press ctrl-XM and problem solved
    local PATHTOMKDIR
    if ((REGION_ACTIVE==1)); then
        local F=$MARK T=$CURSOR
        if [[ $F -gt $T ]]; then
            F=${CURSOR}
            T=${MARK}
        fi
        # get marked area from buffer and eliminate whitespace
        PATHTOMKDIR=${BUFFER[F+1,T]%%[[:space:]]##}
        PATHTOMKDIR=${PATHTOMKDIR##[[:space:]]##}
    else
        local bufwords iword
        bufwords=(${(z)LBUFFER})
        iword=${#bufwords}
        bufwords=(${(z)BUFFER})
        PATHTOMKDIR="${(Q)bufwords[iword]}"
    fi
    [[ -z "${PATHTOMKDIR}" ]] && return 1
    PATHTOMKDIR=${~PATHTOMKDIR}
    if [[ -e "${PATHTOMKDIR}" ]]; then
        zle -M " path already exists, doing nothing"
    else
        zle -M "$(mkdir -p -v "${PATHTOMKDIR}")"
        zle end-of-line
    fi
}
zle -N inplaceMkDirs
bindkey -M "emacs" "^xM" "inplaceMkDirs"

# edit current command line in EDITOR (alt+e)
autoload -z edit-command-line
zle -N edit-command-line
bindkey -M "emacs" "\ee" "edit-command-line"

# missing key support (pos1, end, del)
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^[[3~" delete-char

# word jumping (ctrl+<left|right>)
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# set those so history-substring-search won't show dups
setopt HIST_IGNORE_DUPS HIST_FIND_NO_DUPS

# starship prompt
if [[ $TERM != "dumb" ]]; then
  eval "$(starship init zsh)"
fi

# Aliases
alias -- 'htpasswd'='docker run --rm alpine sh -c '\''apk add pwgen apache2-utils && export pw=`pwgen -B 32 -N 1 -1` && echo "# $pw" && htpasswd -nbB username $pw'\'''
alias -- 'insecscp'='scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
alias -- 'insecssh'='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
alias -- 'd'='dirs -v'
alias -- 'sc'='sudo systemctl'
alias -- 'sj'='sudo journalctl'
alias -- 'k'='kubectl'
alias -- 'kl'='export KUBECONFIG=$(pwd)/kubeconfig'
alias -- 'tl'='export TALOSCONFIG=$(pwd)/talosconfig'
alias -- 'more'='less'
alias -- 'vim'='nvim'
alias -- 'task'='go-task'
alias -- 'l'='ls -l --hyperlink=auto --color=auto'
alias -- 'la'='ls -la --hyperlink=auto --color=auto'
alias -- 'lh'='ls -hAl --hyperlink=auto --color=auto'
alias -- 'ls'='ls -C --hyperlink=auto --color=auto'
alias -- 'lsbig'='ls -flh *(.OL[1,10])'
